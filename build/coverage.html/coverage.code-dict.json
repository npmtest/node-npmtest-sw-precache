{"/home/travis/build/npmtest/node-npmtest-sw-precache/test.js":"/* istanbul instrument in package npmtest_sw_precache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sw-precache/lib.npmtest_sw_precache.js":"/* istanbul instrument in package npmtest_sw_precache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sw_precache = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sw_precache = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sw-precache/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sw-precache && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sw_precache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sw_precache\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sw_precache.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_sw_precache.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sw_precache.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_sw_precache.__dirname +\n                    '/lib.npmtest_sw_precache.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sw-precache/node_modules/sw-precache/lib/sw-precache.js":"/**\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-env node */\n'use strict';\n\nvar crypto = require('crypto');\nvar defaults = require('lodash.defaults');\nvar externalFunctions = require('./functions.js');\nvar fs = require('fs');\nvar glob = require('glob');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar prettyBytes = require('pretty-bytes');\nvar template = require('lodash.template');\nvar util = require('util');\nrequire('es6-promise').polyfill();\n\n// This should only change if there are breaking changes in the cache format used by the SW.\nvar VERSION = 'v3';\n\nfunction absolutePath(relativePath) {\n  return path.resolve(process.cwd(), relativePath);\n}\n\nfunction getFileAndSizeAndHashForFile(file) {\n  var stat = fs.statSync(file);\n\n  if (stat.isFile()) {\n    var buffer = fs.readFileSync(file);\n    return {\n      file: file,\n      size: stat.size,\n      hash: getHash(buffer)\n    };\n  }\n\n  return null;\n}\n\nfunction getFilesAndSizesAndHashesForGlobPattern(globPattern, excludeFilePath) {\n  return glob.sync(globPattern.replace(path.sep, '/')).map(function(file) {\n    // Return null if we want to exclude this file, and it will be excluded in\n    // the subsequent filter().\n    return excludeFilePath === absolutePath(file) ?\n      null :\n      getFileAndSizeAndHashForFile(file);\n  }).filter(function(fileAndSizeAndHash) {\n    return fileAndSizeAndHash !== null;\n  });\n}\n\nfunction getHash(data) {\n  var md5 = crypto.createHash('md5');\n  md5.update(data);\n\n  return md5.digest('hex');\n}\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction generateRuntimeCaching(runtimeCaching) {\n  return runtimeCaching.reduce(function(prev, curr) {\n    var line;\n    if (curr.default) {\n      line = util.format('\\ntoolbox.router.default = toolbox.%s;',\n        curr.default);\n    } else {\n      var urlPattern = curr.urlPattern;\n      if (typeof urlPattern === 'string') {\n        urlPattern = JSON.stringify(urlPattern);\n      }\n\n      if (!(urlPattern instanceof RegExp ||\n            typeof urlPattern === 'string')) {\n        throw new Error(\n          'runtimeCaching.urlPattern must be a string or RegExp');\n      }\n\n      line = util.format('\\ntoolbox.router.%s(%s, %s, %s);',\n        // Default to setting up a 'get' handler.\n        curr.method || 'get',\n        // urlPattern might be a String or a RegExp. sw-toolbox supports both.\n        urlPattern,\n        // If curr.handler is a string, then assume it's the name of one\n        // of the built-in sw-toolbox strategies.\n        // E.g. 'networkFirst' -> toolbox.networkFirst\n        // If curr.handler is something else (like a function), then just\n        // include its body inline.\n        (typeof curr.handler === 'string' ? 'toolbox.' : '') + curr.handler,\n        // Default to no options.\n        stringifyToolboxOptions(curr.options));\n    }\n\n    return prev + line;\n  }, '');\n}\n\nfunction stringifyToolboxOptions(options) {\n  options = options || {};\n  var str = JSON.stringify(options);\n  if (options.origin instanceof RegExp) {\n    str = str.replace(/(\"origin\":)\\{\\}/, '$1' + options.origin);\n  }\n  return str;\n}\n\nfunction generate(params, callback) {\n  return new Promise(function(resolve, reject) {\n    params = defaults(params || {}, {\n      cacheId: '',\n      clientsClaim: true,\n      directoryIndex: 'index.html',\n      dontCacheBustUrlsMatching: null,\n      dynamicUrlToDependencies: {},\n      handleFetch: true,\n      ignoreUrlParametersMatching: [/^utm_/],\n      importScripts: [],\n      logger: console.log,\n      maximumFileSizeToCacheInBytes: 2 * 1024 * 1024, // 2MB\n      navigateFallback: '',\n      navigateFallbackWhitelist: [],\n      replacePrefix: '',\n      skipWaiting: true,\n      staticFileGlobs: [],\n      stripPrefix: '',\n      stripPrefixMulti: {},\n      templateFilePath: path.join(\n        path.dirname(fs.realpathSync(__filename)), '..', 'service-worker.tmpl'),\n      verbose: false\n    });\n\n    if (!Array.isArray(params.ignoreUrlParametersMatching)) {\n      params.ignoreUrlParametersMatching = [params.ignoreUrlParametersMatching];\n    }\n\n    var relativeUrlToHash = {};\n    var cumulativeSize = 0;\n    params.stripPrefixMulti[params.stripPrefix] = params.replacePrefix;\n\n    params.staticFileGlobs.forEach(function(globPattern) {\n      var filesAndSizesAndHashes = getFilesAndSizesAndHashesForGlobPattern(\n        globPattern, params.outputFilePath);\n\n      // The files returned from glob are sorted by default, so we don't need to sort here.\n      filesAndSizesAndHashes.forEach(function(fileAndSizeAndHash) {\n        if (fileAndSizeAndHash.size <= params.maximumFileSizeToCacheInBytes) {\n          // Strip the prefix to turn this into a relative URL.\n          var relativeUrl = fileAndSizeAndHash.file\n            .replace(\n              new RegExp('^(' + Object.keys(params.stripPrefixMulti)\n                  .map(escapeRegExp).join('|') + ')'),\n              function(match) {\n                return params.stripPrefixMulti[match];\n              })\n            .replace(path.sep, '/');\n          relativeUrlToHash[relativeUrl] = fileAndSizeAndHash.hash;\n\n          if (params.verbose) {\n            params.logger(util.format('Caching static resource \"%s\" (%s)',\n              fileAndSizeAndHash.file,\n              prettyBytes(fileAndSizeAndHash.size)));\n          }\n\n          cumulativeSize += fileAndSizeAndHash.size;\n        } else {\n          params.logger(\n            util.format('Skipping static resource \"%s\" (%s) - max size is %s',\n            fileAndSizeAndHash.file, prettyBytes(fileAndSizeAndHash.size),\n            prettyBytes(params.maximumFileSizeToCacheInBytes)));\n        }\n      });\n    });\n\n    Object.keys(params.dynamicUrlToDependencies).forEach(function(dynamicUrl) {\n      var dependency = params.dynamicUrlToDependencies[dynamicUrl];\n      var isString = typeof dependency === 'string';\n\n      if (!Array.isArray(dependency) && !isString) {\n        throw Error(util.format(\n          'The value for the dynamicUrlToDependencies.%s ' +\n          'option must be an Array or a String.',\n          dynamicUrl));\n      }\n\n      if (isString) {\n        cumulativeSize += dependency.length;\n        relativeUrlToHash[dynamicUrl] = getHash(dependency);\n      } else {\n        var filesAndSizesAndHashes = dependency\n          .sort()\n          .map(function(file) {\n            try {\n              return getFileAndSizeAndHashForFile(file);\n            } catch (e) {\n              // Provide some additional information about the failure if the file is missing.\n              if (e.code === 'ENOENT') {\n                params.logger(util.format(\n                  '%s was listed as a dependency for dynamic URL %s, but ' +\n                  'the file does not exist. Either remove the entry as a ' +\n                  'dependency, or correct the path to the file.',\n                  file, dynamicUrl\n                ));\n              }\n              // Re-throw the exception unconditionally, since this should be treated as fatal.\n              throw e;\n            }\n          });\n        var concatenatedHashes = '';\n\n        filesAndSizesAndHashes.forEach(function(fileAndSizeAndHash) {\n          // Let's assume that the response size of a server-generated page is roughly equal to the\n          // total size of all its components.\n          cumulativeSize += fileAndSizeAndHash.size;\n          concatenatedHashes += fileAndSizeAndHash.hash;\n        });\n\n        relativeUrlToHash[dynamicUrl] = getHash(concatenatedHashes);\n      }\n\n      if (params.verbose) {\n        if (isString) {\n          params.logger(util.format(\n            'Caching dynamic URL \"%s\" with dependency on user-supplied string',\n            dynamicUrl));\n        } else {\n          params.logger(util.format(\n            'Caching dynamic URL \"%s\" with dependencies on %j',\n            dynamicUrl, dependency));\n        }\n      }\n    });\n\n    var runtimeCaching;\n    var swToolboxCode;\n    if (params.runtimeCaching) {\n      runtimeCaching = generateRuntimeCaching(params.runtimeCaching);\n      var pathToSWToolbox = require.resolve('sw-toolbox/sw-toolbox.js');\n      swToolboxCode = fs.readFileSync(pathToSWToolbox, 'utf8')\n        .replace('//# sourceMappingURL=sw-toolbox.js.map', '');\n    }\n\n    // It's very important that running this operation multiple times with the same input files\n    // produces identical output, since we need the generated service-worker.js file to change if\n    // the input files changes. The service worker update algorithm,\n    // https://w3c.github.io/ServiceWorker/#update-algorithm, relies on detecting even a single\n    // byte change in service-worker.js to trigger an update. Because of this, we write out the\n    // cache options as a series of sorted, nested arrays rather than as objects whose serialized\n    // key ordering might vary.\n    var relativeUrls = Object.keys(relativeUrlToHash);\n    var precacheConfig = relativeUrls.sort().map(function(relativeUrl) {\n      return [relativeUrl, relativeUrlToHash[relativeUrl]];\n    });\n\n    params.logger(util.format(\n      'Total precache size is about %s for %d resources.',\n      prettyBytes(cumulativeSize), relativeUrls.length));\n\n    fs.readFile(params.templateFilePath, 'utf8', function(error, data) {\n      if (error) {\n        if (callback) {\n          callback(error);\n        }\n\n        return reject(error);\n      }\n\n      var populatedTemplate = template(data)({\n        cacheId: params.cacheId,\n        clientsClaim: params.clientsClaim,\n        // Ensure that anything false is translated into '', since this will be treated as a string.\n        directoryIndex: params.directoryIndex || '',\n        dontCacheBustUrlsMatching: params.dontCacheBustUrlsMatching || false,\n        externalFunctions: externalFunctions,\n        handleFetch: params.handleFetch,\n        ignoreUrlParametersMatching: params.ignoreUrlParametersMatching,\n        importScripts: params.importScripts ?\n          params.importScripts.map(JSON.stringify).join(',') : null,\n        // Ensure that anything false is translated into '', since this will be treated as a string.\n        navigateFallback: params.navigateFallback || '',\n        navigateFallbackWhitelist:\n          JSON.stringify(params.navigateFallbackWhitelist.map(function(regex) {\n            return regex.source;\n          })),\n        precacheConfig: JSON.stringify(precacheConfig),\n        runtimeCaching: runtimeCaching,\n        skipWaiting: params.skipWaiting,\n        swToolboxCode: swToolboxCode,\n        version: VERSION\n      });\n\n      if (callback) {\n        callback(null, populatedTemplate);\n      }\n\n      resolve(populatedTemplate);\n    });\n  });\n}\n\nfunction write(filePath, params, callback) {\n  return new Promise(function(resolve, reject) {\n    function finish(error, value) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(value);\n      }\n\n      if (callback) {\n        callback(error, value);\n      }\n    }\n\n    mkdirp.sync(path.dirname(filePath));\n\n    // Keep track of where we're outputting the file to ensure that we don't\n    // pick up a previously written version in our new list of files.\n    // See https://github.com/GoogleChrome/sw-precache/issues/101\n    params.outputFilePath = absolutePath(filePath);\n\n    generate(params).then(function(serviceWorkerFileContents) {\n      fs.writeFile(filePath, serviceWorkerFileContents, finish);\n    }, finish);\n  });\n}\n\nmodule.exports = {\n  generate: generate,\n  write: write\n};\n\nif (process.env.NODE_ENV === 'swprecache-test') {\n  module.exports.generateRuntimeCaching = generateRuntimeCaching;\n}\n","/home/travis/build/npmtest/node-npmtest-sw-precache/node_modules/sw-precache/lib/functions.js":"/**\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-env node,worker */\n'use strict';\n\nvar URL = require('dom-urls');\n\nmodule.exports = {\n  stripIgnoredUrlParameters: function(originalUrl,\n    ignoreUrlParametersMatching) {\n    var url = new URL(originalUrl);\n\n    url.search = url.search.slice(1) // Exclude initial '?'\n      .split('&') // Split into an array of 'key=value' strings\n      .map(function(kv) {\n        return kv.split('='); // Split each 'key=value' string into a [key, value] array\n      })\n      .filter(function(kv) {\n        return ignoreUrlParametersMatching.every(function(ignoredRegex) {\n          return !ignoredRegex.test(kv[0]); // Return true iff the key doesn't match any of the regexes.\n        });\n      })\n      .map(function(kv) {\n        return kv.join('='); // Join each [key, value] array into a 'key=value' string\n      })\n      .join('&'); // Join the array of 'key=value' strings into a string with '&' in between each\n\n    return url.toString();\n  },\n\n  addDirectoryIndex: function(originalUrl, index) {\n    var url = new URL(originalUrl);\n    if (url.pathname.slice(-1) === '/') {\n      url.pathname += index;\n    }\n    return url.toString();\n  },\n\n  isPathWhitelisted: function(whitelist, absoluteUrlString) {\n    // If the whitelist is empty, then consider all URLs to be whitelisted.\n    if (whitelist.length === 0) {\n      return true;\n    }\n\n    // Otherwise compare each path regex to the path of the URL passed in.\n    var path = (new URL(absoluteUrlString)).pathname;\n    return whitelist.some(function(whitelistedPathRegex) {\n      return path.match(whitelistedPathRegex);\n    });\n  },\n\n  createCacheKey: function(originalUrl, paramName, paramValue,\n                           dontCacheBustUrlsMatching) {\n    // Create a new URL object to avoid modifying originalUrl.\n    var url = new URL(originalUrl);\n\n    // If dontCacheBustUrlsMatching is not set, or if we don't have a match,\n    // then add in the extra cache-busting URL parameter.\n    if (!dontCacheBustUrlsMatching ||\n        !(url.pathname.match(dontCacheBustUrlsMatching))) {\n      url.search += (url.search ? '&' : '') +\n        encodeURIComponent(paramName) + '=' + encodeURIComponent(paramValue);\n    }\n\n    return url.toString();\n  },\n\n  // When passed a redirected response, this will create a new, \"clean\" response\n  // that can be used to respond to a navigation request.\n  // See https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n  cleanResponse: function(originalResponse) {\n    // If this is not a redirected response, then we don't have to do anything.\n    if (!originalResponse.redirected) {\n      return Promise.resolve(originalResponse);\n    }\n\n    // Firefox 50 and below doesn't support the Response.body stream, so we may\n    // need to read the entire body to memory as a Blob.\n    var bodyPromise = 'body' in originalResponse ?\n      Promise.resolve(originalResponse.body) :\n      originalResponse.blob();\n\n    return bodyPromise.then(function(body) {\n      // new Response() is happy when passed either a stream or a Blob.\n      return new Response(body, {\n        headers: originalResponse.headers,\n        status: originalResponse.status,\n        statusText: originalResponse.statusText\n      });\n    });\n  }\n};\n"}